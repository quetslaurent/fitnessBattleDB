Index: Application/Services/Training/TrainingService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\nusing System.Linq;\r\nusing Application.Repositories;\r\nusing Application.Services.Training.Dto;\r\nusing Domain.Training;\r\n\r\nnamespace Application.Services.Training\r\n{\r\n    public class TrainingService : ITrainingService\r\n    {\r\n        /*\r\n        * On récupère les repositories qu'on a besoin\r\n        */\r\n        private readonly IActivityRepository _activityRepository;\r\n        private readonly IUserRepository _userRepository;\r\n        private readonly ITrainingDateRepository _trainingDateRepository;\r\n        private readonly ITrainingRepository _trainingRepository;\r\n        \r\n        //on recupère la Factory\r\n        private readonly ITrainingFactory _trainingFactory = new TrainingFactory();\r\n\r\n        //Constructeur\r\n        public TrainingService(IActivityRepository activityRepository, IUserRepository userRepository, ITrainingDateRepository trainingDateRepository, ITrainingRepository trainingRepository)\r\n        {\r\n            _activityRepository = activityRepository;\r\n            _userRepository = userRepository;\r\n            _trainingDateRepository = trainingDateRepository;\r\n            _trainingRepository = trainingRepository;\r\n        }\r\n\r\n        /*\r\n         * Récupérer la liste des training ayant une même date\r\n         */\r\n        \r\n        public IEnumerable<OutputDtoQueryTraining> GetByDateId(int dateId)\r\n        {\r\n            return _trainingRepository\r\n                .GetByDateId(dateId)\r\n                .Select(training => new OutputDtoQueryTraining\r\n                {\r\n                   Id = training.Id,\r\n                   Repetitions = training.Repetitions,\r\n                   ActivityName = training.Activity.Name,\r\n                   TrainingDateValue = training.TrainingDate.Date\r\n                   \r\n                });\r\n        }\r\n\r\n        /**\r\n         * Créer un training \r\n         */\r\n        public OutputDtoAddTraining Create(InputDtoAddTraining inputDtoAddTraining)\r\n        {\r\n            var user = _userRepository.GetById(inputDtoAddTraining.UserId);\r\n            var activity = _activityRepository.GetById(inputDtoAddTraining.ActivityId);\r\n            var trainingDate = _trainingDateRepository.GetById(inputDtoAddTraining.TrainingDateId);\r\n            \r\n            var trainingFromDto = _trainingFactory.CreateTrainingFromValues(inputDtoAddTraining.Repetitions,user,activity,trainingDate);\r\n            var trainingInDb = _trainingRepository.Create(trainingFromDto);\r\n            \r\n            return new OutputDtoAddTraining\r\n            {\r\n                Id=trainingInDb.Id,\r\n                Repetitions = trainingInDb.Repetitions,\r\n                ActivityName = trainingInDb.Activity.Name,\r\n                TrainingDateValue = trainingInDb.TrainingDate.Date\r\n            };\r\n        }\r\n\r\n        public bool DeleteTraining(int trainingId)\r\n        {\r\n            return _trainingRepository.Delete(trainingId);\r\n        }\r\n        \r\n        \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Application/Services/Training/TrainingService.cs	(revision 707fb6a11a51206981a2fc25197f7051998c3e86)
+++ Application/Services/Training/TrainingService.cs	(date 1605880525424)
@@ -31,12 +31,12 @@
         /*
          * Récupérer la liste des training ayant une même date
          */
-        
-        public IEnumerable<OutputDtoQueryTraining> GetByDateId(int dateId)
+
+        public IEnumerable<OutputDtoGetTraining> GetByTrainingDateId(int dateId)
         {
             return _trainingRepository
                 .GetByDateId(dateId)
-                .Select(training => new OutputDtoQueryTraining
+                .Select(training => new OutputDtoGetTraining
                 {
                    Id = training.Id,
                    Repetitions = training.Repetitions,
Index: Application/Services/Training/ITrainingService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\nusing Application.Services.Training.Dto;\r\n\r\nnamespace Application.Services.Training\r\n{\r\n    public interface ITrainingService\r\n    {\r\n        IEnumerable<OutputDtoQueryTraining> GetByDateId(int dateId);\r\n        \r\n        OutputDtoAddTraining Create(InputDtoAddTraining inputDtoAddTraining);\r\n        \r\n        bool DeleteTraining(int trainingId);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Application/Services/Training/ITrainingService.cs	(revision 707fb6a11a51206981a2fc25197f7051998c3e86)
+++ Application/Services/Training/ITrainingService.cs	(date 1605880525423)
@@ -5,7 +5,7 @@
 {
     public interface ITrainingService
     {
-        IEnumerable<OutputDtoQueryTraining> GetByDateId(int dateId);
+        IEnumerable<OutputDtoGetTraining> GetByTrainingDateId(int dateId);
         
         OutputDtoAddTraining Create(InputDtoAddTraining inputDtoAddTraining);
         
Index: Api/Controllers/TrainingDateController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace FitnessBattle.Controllers\r\n{\r\n    public class TrainingDateController\r\n    {\r\n        \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Api/Controllers/TrainingDateController.cs	(revision 707fb6a11a51206981a2fc25197f7051998c3e86)
+++ Api/Controllers/TrainingDateController.cs	(date 1605880525421)
@@ -1,7 +1,34 @@
+using Application.Services.Training;
+using Application.Services.Training.Dto;
+using Application.Services.TrainingDate;
+using Application.Services.TrainingDate.Dto;
+using Microsoft.AspNetCore.Mvc;
+
 namespace FitnessBattle.Controllers
 {
-    public class TrainingDateController
+    [ApiController]
+    [Route("api/training-dates")]
+    public class TrainingDateController : ControllerBase
     {
-        
+        private readonly ITrainingDateService _trainingDateService;
+        private readonly ITrainingService _trainingService;
+
+        public TrainingDateController(ITrainingDateService trainingDateService, ITrainingService trainingService)
+        {
+            _trainingDateService = trainingDateService;
+            _trainingService = trainingService;
+        }
+
+        [HttpGet]
+        public ActionResult<OutputDtoQueryTrainingDate> Query()
+        {
+            return Ok(_trainingDateService.Query());
+        }
+
+        [HttpPost]
+        public ActionResult<OutputDtoAddTrainingDate> Post([FromBody] InputDtoAddTrainingDate inputDtoAddTrainingDate)
+        {
+            return Ok(_trainingDateService.Create(inputDtoAddTrainingDate));
+        }
     }
 }
\ No newline at end of file
Index: Application/Services/Unit/Dto/OutputDtoQueryUnit.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Application/Services/Unit/Dto/OutputDtoQueryUnit.cs	(date 1605880525425)
+++ Application/Services/Unit/Dto/OutputDtoQueryUnit.cs	(date 1605880525425)
@@ -0,0 +1,8 @@
+namespace Application.Services.Unit.Dto
+{
+    public class OutputDtoQueryUnit
+    {
+        public int Id { get; set; } // le retour renvoie aussi l'id
+        public string Type { get; set; }
+    }
+}
\ No newline at end of file
Index: Application/Services/Unit/UnitService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\nusing System.Linq;\r\nusing Application.Repositories;\r\nusing Application.Services.Category.Dto;\r\nusing Application.Services.TrainingDate.Dto;\r\nusing Application.Services.Unit.Dto;\r\nusing Domain.Category;\r\nusing Domain.Unit;\r\n\r\nnamespace Application.Services.Category\r\n{\r\n    public class UnitService : IUnitService\r\n    {\r\n        //repository et factory\r\n        private readonly IUnitRepository _unitRepository;\r\n        private readonly IUnitFactory _unitFactory = new UnitFactory();\r\n\r\n        //constructeur\r\n        public UnitService(IUnitRepository unitRepository)\r\n        {\r\n            _unitRepository = unitRepository;\r\n        }\r\n\r\n        public OutputDtoAddUnit Create(InputDtoAddUnit inputDtoAddUnit)\r\n        {\r\n            //DTO --> Domain\r\n            var unitFromDto = _unitFactory.CreateFromType(inputDtoAddUnit.Type);\r\n            //Repository demande un element du domain\r\n            var unitInDb = _unitRepository.Create(unitFromDto);\r\n            \r\n            //Domain -> DTO\r\n            return new OutputDtoAddUnit\r\n            {\r\n                Id = unitInDb.Id,\r\n                Type = unitInDb.Type\r\n            };\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Application/Services/Unit/UnitService.cs	(revision 707fb6a11a51206981a2fc25197f7051998c3e86)
+++ Application/Services/Unit/UnitService.cs	(date 1605880525426)
@@ -7,7 +7,7 @@
 using Domain.Category;
 using Domain.Unit;
 
-namespace Application.Services.Category
+namespace Application.Services.Unit
 {
     public class UnitService : IUnitService
     {
@@ -21,6 +21,15 @@
             _unitRepository = unitRepository;
         }
 
+        public IEnumerable<OutputDtoQueryUnit> Query()
+        {
+            return _unitRepository.Query().Select(unit => new OutputDtoQueryUnit
+            {
+                Id = unit.Id,
+                Type = unit.Type
+            });
+        }
+
         public OutputDtoAddUnit Create(InputDtoAddUnit inputDtoAddUnit)
         {
             //DTO --> Domain
Index: Application/Services/Training/Dto/OutputDtoQueryTraining.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\n\r\nnamespace Application.Services.Training.Dto\r\n{\r\n    public class OutputDtoQueryTraining\r\n    {\r\n        /*\r\n     * DTO qui permets d’ajouter un nouveau Training,\r\n     * cela permets de recevoir les éléments sans l’id pour créer un training,\r\n     * car l’utilisateur ne doit pas entrer l’id dans les données.\r\n     */\r\n        public int Id { get; set; }\r\n        public double Repetitions { get; set; }\r\n        public string ActivityName { get; set; }\r\n        public DateTime TrainingDateValue { get; set; }\r\n    }\r\n}
===================================================================
--- Application/Services/Training/Dto/OutputDtoQueryTraining.cs	(revision 707fb6a11a51206981a2fc25197f7051998c3e86)
+++ Application/Services/Training/Dto/OutputDtoGetTraining.cs	(date 1605880525445)
@@ -2,7 +2,7 @@
 
 namespace Application.Services.Training.Dto
 {
-    public class OutputDtoQueryTraining
+    public class OutputDtoGetTraining
     {
         /*
      * DTO qui permets d’ajouter un nouveau Training,
Index: Application/Services/Unit/IUnitService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Application.Services.TrainingDate.Dto;\r\nusing Application.Services.Unit.Dto;\r\n\r\nnamespace Application.Services.Category\r\n{\r\n    public interface IUnitService\r\n    {\r\n        OutputDtoAddUnit Create(InputDtoAddUnit inputDtaAddUnit);\r\n    }\r\n\r\n   \r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Application/Services/Unit/IUnitService.cs	(revision 707fb6a11a51206981a2fc25197f7051998c3e86)
+++ Application/Services/Unit/IUnitService.cs	(date 1605880525425)
@@ -1,10 +1,12 @@
+using System.Collections.Generic;
 using Application.Services.TrainingDate.Dto;
 using Application.Services.Unit.Dto;
 
-namespace Application.Services.Category
+namespace Application.Services.Unit
 {
     public interface IUnitService
     {
+        IEnumerable<OutputDtoQueryUnit> Query();
         OutputDtoAddUnit Create(InputDtoAddUnit inputDtaAddUnit);
     }
 
Index: Application/Services/TrainingDate/TrainingDateService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Application.Repositories;\r\nusing Application.Services.TrainingDate.Dto;\r\n\r\nnamespace Application.Services.TrainingDate\r\n{\r\n    public class TrainingDateService : ITrainingDateService\r\n    {\r\n        private readonly ITrainingDateRepository _trainingDateRepository;\r\n\r\n        public TrainingDateService(ITrainingDateRepository trainingDateRepository)\r\n        {\r\n            _trainingDateRepository = trainingDateRepository;\r\n        }\r\n\r\n        public IEnumerable<OutputDtoQueryTrainingDate> Query()\r\n        {\r\n            return _trainingDateRepository.Query().Select(trainingDate => new OutputDtoQueryTrainingDate\r\n            {\r\n                Id = trainingDate.Id,\r\n                Date = trainingDate.Date\r\n            });\r\n        }\r\n\r\n        public OutputDtoAddTrainingDate Create(InputDtoAddTrainingDate inputDtoAddTrainingDate)\r\n        {\r\n            var trainingDate = _trainingDateRepository.Create(inputDtoAddTrainingDate.Date);\r\n            return new OutputDtoAddTrainingDate\r\n            {\r\n                Id=trainingDate.Id,\r\n                Date = trainingDate.Date\r\n            };\r\n        }\r\n        \r\n        \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Application/Services/TrainingDate/TrainingDateService.cs	(revision 707fb6a11a51206981a2fc25197f7051998c3e86)
+++ Application/Services/TrainingDate/TrainingDateService.cs	(date 1605880525425)
@@ -23,7 +23,7 @@
                 Date = trainingDate.Date
             });
         }
-
+        
         public OutputDtoAddTrainingDate Create(InputDtoAddTrainingDate inputDtoAddTrainingDate)
         {
             var trainingDate = _trainingDateRepository.Create(inputDtoAddTrainingDate.Date);
Index: Api/Controllers/UserController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Api/Controllers/UserController.cs	(date 1605880525422)
+++ Api/Controllers/UserController.cs	(date 1605880525422)
@@ -0,0 +1,30 @@
+using Application.Services.User;
+using Application.Services.User.Dto;
+using Microsoft.AspNetCore.Mvc;
+
+namespace FitnessBattle.Controllers
+{
+    [ApiController]
+    [Route("api/users")]
+    public class UserController : ControllerBase
+    {
+        private readonly IUserService _userService;
+
+        public UserController(IUserService userService)
+        {
+            _userService = userService;
+        }
+
+        [HttpGet]
+        public ActionResult<OutputDtoQueryUser> Query()
+        {
+            return Ok(_userService.Query());
+        }
+
+        [HttpPost]
+        public ActionResult<OutputDtoAddUser> Post([FromBody] InputDtoAddUser inputDtoAddUser)
+        {
+            return Ok(_userService.Create(inputDtoAddUser));
+        }
+    }
+}
\ No newline at end of file
Index: Application/Services/TrainingDate/ITrainingDateService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\nusing Application.Services.TrainingDate.Dto;\r\n\r\nnamespace Application.Services.TrainingDate\r\n{\r\n    public interface ITrainingDateService\r\n    {\r\n        IEnumerable<OutputDtoQueryTrainingDate> Query();\r\n\r\n        OutputDtoAddTrainingDate Create(InputDtoAddTrainingDate inputDtoAddTrainingDate);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Application/Services/TrainingDate/ITrainingDateService.cs	(revision 707fb6a11a51206981a2fc25197f7051998c3e86)
+++ Application/Services/TrainingDate/ITrainingDateService.cs	(date 1605880525424)
@@ -1,4 +1,5 @@
 using System.Collections.Generic;
+using Application.Services.Training.Dto;
 using Application.Services.TrainingDate.Dto;
 
 namespace Application.Services.TrainingDate
Index: Api/Controllers/CategoryController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Api/Controllers/CategoryController.cs	(date 1605880525420)
+++ Api/Controllers/CategoryController.cs	(date 1605880525420)
@@ -0,0 +1,31 @@
+using Application.Services.Category;
+using Application.Services.Category.Dto;
+using Application.Services.TrainingDate.Dto;
+using Microsoft.AspNetCore.Mvc;
+
+namespace FitnessBattle.Controllers
+{
+    [ApiController]
+    [Route("api/categories")]
+    public class CategoryController : ControllerBase
+    {
+        private readonly ICategoryService _categoryService;
+
+        public CategoryController(ICategoryService unitService)
+        {
+            _categoryService = unitService;
+        }
+
+        [HttpGet]
+        public ActionResult<OutputDtoQueryCategory> Query()
+        {
+            return Ok(_categoryService.Query());
+        }
+
+        [HttpPost]
+        public ActionResult<OutputDtoAddCategory> Post([FromBody] InputDtoAddCategory inputDtoAddCategory)
+        {
+            return Ok(_categoryService.Create(inputDtoAddCategory));
+        }
+    }
+}
\ No newline at end of file
Index: Api/Controllers/UnitController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Api/Controllers/UnitController.cs	(date 1605880525421)
+++ Api/Controllers/UnitController.cs	(date 1605880525421)
@@ -0,0 +1,32 @@
+using Application.Services.Category;
+using Application.Services.TrainingDate.Dto;
+using Application.Services.Unit;
+using Application.Services.Unit.Dto;
+using Microsoft.AspNetCore.Mvc;
+
+namespace FitnessBattle.Controllers
+{
+    [ApiController]
+    [Route("api/units")]
+    public class UnitController : ControllerBase
+    {
+        private readonly IUnitService _unitService;
+
+        public UnitController(IUnitService unitService)
+        {
+            _unitService = unitService;
+        }
+
+        [HttpGet]
+        public ActionResult<OutputDtoAddUnit> Query()
+        {
+            return Ok(_unitService.Query());
+        }
+
+        [HttpPost]
+        public ActionResult<OutputDtoAddUnit> Post([FromBody] InputDtoAddUnit inputDtoAddUnit)
+        {
+            return Ok(_unitService.Create(inputDtoAddUnit));
+        }
+    }
+}
\ No newline at end of file
Index: Api/Controllers/TrainingController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Api/Controllers/TrainingController.cs	(date 1605880525421)
+++ Api/Controllers/TrainingController.cs	(date 1605880525421)
@@ -0,0 +1,31 @@
+using Application.Services.Training;
+using Application.Services.Training.Dto;
+using Microsoft.AspNetCore.Mvc;
+
+namespace FitnessBattle.Controllers
+{
+    [ApiController]
+    [Route("api/training")]
+    public class TrainingController : ControllerBase
+    {
+        private readonly ITrainingService _trainingService;
+
+        public TrainingController(ITrainingService trainingService)
+        {
+            _trainingService = trainingService;
+        }
+        
+        [HttpGet]
+        [Route("{idTrainingDate:int}/trainings")]
+        public ActionResult<OutputDtoGetTraining> GetTrainingsByTrainingDateId(int idTrainingDate)
+        {
+            return Ok(_trainingService.GetByTrainingDateId(idTrainingDate));
+        }
+
+        [HttpPost]
+        public ActionResult<OutputDtoAddTraining> Post([FromBody] InputDtoAddTraining inputDtoAddTraining)
+        {
+            return Ok(_trainingService.Create(inputDtoAddTraining));
+        }
+    }
+}
\ No newline at end of file
